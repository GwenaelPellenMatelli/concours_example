<?php

/**
 * @file
 * Implements the concour functionality required to create and display an entity.
 
 * Implements hook_entity_info().
 *
 * This is the fundamental description of the entity.
 *
 * It provides a single entity with a single bundle and without revision
 * support.
 */
function concours_example_entity_info() {
  $info['concours_example_concour'] = array(
    // A human readable label to identify our entity.
    'label' => t('Example Concour Entity'),

    // The controller for our Entity, extending the Drupal core controller.
    'controller class' => 'ConcoursExampleConcourController',

    // The table for this entity defined in hook_schema()
    'base table' => 'concours_example_concour',

    // Returns the uri elements of an entity.
    'uri callback' => 'concours_example_concour_uri',

    // IF fieldable == FALSE, we can't attach fields.
    'fieldable' => TRUE,

    // entity_keys tells the controller what database fields are used for key
    // functions. It is not required if we don't have bundles or revisions.
    // Here we do not support a revision, so that entity key is omitted.
    'entity keys' => array(
      // The 'id' (concour_id here) is the unique id.
      'id' => 'concour_id' ,
      // Bundle will be determined by the 'bundle_type' field.
      'bundle' => 'bundle_type',
    ),
    'bundle keys' => array(
      'bundle' => 'bundle_type',
    ),

    // FALSE disables caching. Caching functionality is handled by Drupal core.
    'static cache' => TRUE,

    // Bundles are alternative groups of fields or configuration
    // associated with a base entity type.
    'bundles' => array(
      'first_example_bundle' => array(
        'label' => 'First example bundle',
        // 'admin' key is used by the Field UI to provide field and
        // display UI pages.
        'admin' => array(
          'path' => 'admin/structure/concours_example_concour/manage',
          'access arguments' => array('administer concours_example_concour entities'),
        ),
      ),
    ),
    // View modes allow entities to be displayed differently based on context.
    // As a demonstration we'll support "Tweaky", but we could have and support
    // multiple display modes.
    'view modes' => array(
      'tweaky' => array(
        'label' => t('Tweaky'),
        'custom settings' => FALSE,
      ),
    ),
  );

  return $info;
}

/**
 * Fetch a concour object.
 *
 * This function ends up being a shim between the menu system and
 * concours_example_concour_load_multiple().
 *
 * This function gets its name from the menu system's wildcard
 * naming conventions. For example, /path/%wildcard would end
 * up calling wildcard_load(%wildcard value). In our case defining
 * the path: examples/concours_example/concour/%concours_example_concour in
 * hook_menu() tells Drupal to call concours_example_concour_load().
 *
 * @param int $concour_id
 *   Integer specifying the concour entity id.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return object
 *   A fully-loaded $concour object or FALSE if it cannot be loaded.
 *
 * @see concours_example_concour_load_multiple()
 * @see concours_example_menu()
 */
function concours_example_concour_load($concour_id = NULL, $reset = FALSE) {
  $concour_ids = (isset($concour_id) ? array($concour_id) : array());
  $concour = concours_example_concour_load_multiple($concour_ids, array(), $reset);
  return $concour ? reset($concour) : FALSE;
}

/**
 * Loads multiple concour entities.
 *
 * We only need to pass this request along to entity_load(), which
 * will in turn call the load() method of our entity controller class.
 */
function concours_example_concour_load_multiple($concour_ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('concours_example_concour', $concour_ids, $conditions, $reset);
}

/**
 * Implements the uri callback.
 */
function concours_example_concour_uri($concour) {
  return array(
    'path' => 'examples/concours_example/concour/' . $concour->concour_id,
  );
}

/**
 * Implements hook_menu().
 */
function concours_example_menu() {
  $items['examples/concours_example'] = array(
    'title' => 'Entity Example',
    'page callback' => 'concours_example_info_page',
    'access arguments' => array('view any concours_example_concour entity'),
  );

  // This provides a place for Field API to hang its own
  // interface and has to be the same as what was defined
  // in concour_entity_info() above.
  $items['admin/structure/concours_example_concour/manage'] = array(
    'title' => 'Administer concours_example_concour entity type',
    'page callback' => 'concours_example_concour_list_entities',
    'access arguments' => array('administer concours_example_concour entities'),
  );

  // Add example entities.
  $items['admin/structure/concours_example_concour/manage/add'] = array(
    'title' => 'Add an Entity Example Concour Entity',
    'page callback' => 'concours_example_concour_add',
    'access arguments' => array('create concours_example_concour entities'),
    'type' => MENU_LOCAL_ACTION,
  );

  // List of all concours_example_concour entities.
  $items['admin/structure/concours_example_concour/manage/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // The page to view our entities - needs to follow what
  // is defined in concour_uri and will use load_concour to retrieve
  // the necessary entity info.
  $items['examples/concours_example/concour/%concours_example_concour'] = array(
    'title callback' => 'concours_example_concour_title',
    'title arguments' => array(3),
    'page callback' => 'concours_example_concour_view',
    'page arguments' => array(3),
    'access arguments' => array('view any concours_example_concour entity'),
  );

  // 'View' tab for an individual entity page.
  $items['examples/concours_example/concour/%concours_example_concour/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // 'Edit' tab for an individual entity page.
  $items['examples/concours_example/concour/%concours_example_concour/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('concours_example_concour_form', 3),
    'access arguments' => array('edit any concours_example_concour entity'),
    'type' => MENU_LOCAL_TASK,
  );

  // Add example entities.
  $items['examples/concours_example/concour/add'] = array(
    'title' => 'Add an Entity Example Concour Entity',
    'page callback' => 'concours_example_concour_add',
    'access arguments' => array('create concours_example_concour entities'),
  );

  return $items;
}

/**
 * Concour information for the page.
 */
function concours_example_info_page() {
  $content['preface'] = array(
    '#type' => 'item',
    '#markup' => t('The entity example provides a simple example entity.'),
  );
  if (user_access('administer concours_example_concour entities')) {
    $content['preface']['#markup'] = t('You can administer these and add fields and change the view !link.',
      array('!link' => l(t('here'), 'admin/structure/concours_example_concour/manage'))
    );
  }
  $content['table'] = concours_example_concour_list_entities();

  return $content;
}

/**
 * Implements hook_permission().
 */
function concours_example_permission() {
  $permissions = array(
    'administer concours_example_concour entities' => array(
      'title' => t('Administer concours_example_concour entities'),
    ),
    'view any concours_example_concour entity' => array(
      'title' => t('View any Entity Example Concour entity'),
    ),
    'edit any concours_example_concour entity' => array(
      'title' => t('Edit any Entity Example Concour entity'),
    ),
    'create concours_example_concour entities' => array(
      'title' => t('Create Entity Example Concour Entities'),
    ),
  );
  return $permissions;
}

/**
 * Returns a render array with all concours_example_concour entities.
 *
 * In this concour example we know that there won't be many entities,
 * so we'll just load them all for display. See pager_example.module
 * to implement a pager. Most implementations would probably do this
 * with the contrib Entity API module, or a view using views module,
 * but we avoid using non-core features in the Examples project.
 *
 * @see pager_example.module
 */
function concours_example_concour_list_entities() {
  $content = array();
  // Load all of our entities.
  $entities = concours_example_concour_load_multiple();
  if (!empty($entities)) {
    foreach ($entities as $entity) {
      // Create tabular rows for our entities.
      $rows[] = array(
        'data' => array(
          'id' => $entity->concour_id,
          'item_description' => l($entity->item_description, 'examples/concours_example/concour/' . $entity->concour_id),
          'bundle' => $entity->bundle_type,
        ),
      );
    }
    // Put our entities into a themed table. See theme_table() for details.
    $content['entity_table'] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => array(t('ID'), t('Item Description'), t('Bundle')),
    );
  }
  else {
    // There were no entities. Tell the user.
    $content[] = array(
      '#type' => 'item',
      '#markup' => t('No concours_example_concour entities currently exist.'),
    );
  }
  return $content;
}

/**
 * Callback for a page title when this entity is displayed.
 */
function concours_example_concour_title($entity) {
  return t('Entity Example Concour (item_description=@item_description)', array('@item_description' => $entity->item_description));
}

/**
 * Menu callback to display an entity.
 *
 * As we load the entity for display, we're responsible for invoking a number
 * of hooks in their proper order.
 *
 * @see hook_entity_prepare_view()
 * @see hook_entity_view()
 * @see hook_entity_view_alter()
 */
function concours_example_concour_view($entity, $view_mode = 'tweaky') {
  // Our entity type, for convenience.
  $entity_type = 'concours_example_concour';
  // Start setting up the content.
  $entity->content = array(
    '#view_mode' => $view_mode,
  );
  // Build fields content - this is where the Field API really comes in to play.
  // The task has very little code here because it all gets taken care of by
  // field module.
  // field_attach_prepare_view() lets the fields load any data they need
  // before viewing.
  field_attach_prepare_view($entity_type, array($entity->concour_id => $entity),
    $view_mode);
  // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
  // for us.
  entity_prepare_view($entity_type, array($entity->concour_id => $entity));
  // Now field_attach_view() generates the content for the fields.
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);

  // OK, Field API done, now we can set up some of our own data.
  $entity->content['created'] = array(
    '#type' => 'item',
    '#title' => t('Created date'),
    '#markup' => format_date($entity->created),
  );
  $entity->content['item_description'] = array(
    '#type' => 'item',
    '#title' => t('Item Description'),
    '#markup' => $entity->item_description,
  );

  // Now to invoke some hooks. We need the language code for
  // hook_entity_view(), so let's get that.
  global $language;
  $langcode = $language->language;
  // And now invoke hook_entity_view().
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode, $langcode);
  // Now invoke hook_entity_view_alter().
  drupal_alter(array('concours_example_concour_view', 'entity_view'), $entity->content, $entity_type);

  // And finally return the content.
  return $entity->content;
}

/**
 * Implements hook_field_extra_fields().
 *
 * This exposes the "extra fields" (usually properties that can be configured
 * as if they were fields) of the entity as pseudo-fields
 * so that they get handled by the Entity and Field core functionality.
 * Node titles get treated in a similar manner.
 */
function concours_example_field_extra_fields() {
  $form_elements['item_description'] = array(
    'label' => t('Item Description'),
    'description' => t('Item Description (an extra form field)'),
    'weight' => -5,
  );
  $display_elements['created'] = array(
    'label' => t('Creation date'),
    'description' => t('Creation date (an extra display field)'),
    'weight' => 0,
  );
  $display_elements['item_description'] = array(
    'label' => t('Item Description'),
    'description' => t('Just like title, but trying to point out that it is a separate property'),
    'weight' => 0,
  );

  // Since we have only one bundle type, we'll just provide the extra_fields
  // for it here.
  $extra_fields['concours_example_concour']['first_example_bundle']['form'] = $form_elements;
  $extra_fields['concours_example_concour']['first_example_bundle']['display'] = $display_elements;

  return $extra_fields;
}

/**
 * Provides a wrapper on the edit form to add a new entity.
 */
function concours_example_concour_add() {
  // Create a concour entity structure to be used and passed to the validation
  // and submission functions.
  $entity = entity_get_controller('concours_example_concour')->create();
  return drupal_get_form('concours_example_concour_form', $entity);
}

/**
 * Form function to create an concours_example_concour entity.
 *
 * The pattern is:
 * - Set up the form for the data that is specific to your
 *   entity: the columns of your base table.
 * - Call on the Field API to pull in the form elements
 *   for fields attached to the entity.
 */
function concours_example_concour_form($form, &$form_state, $entity) {
  $form['item_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Item Description'),
    '#required' => TRUE,
    '#default_value' => $entity->item_description,
  );

  $form['concour_entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  field_attach_form('concours_example_concour', $entity, $form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 100,
  );
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#submit' => array('concours_example_concour_edit_delete'),
    '#weight' => 200,
  );

  return $form;
}


/**
 * Validation handler for concours_example_concour_add_form form.
 *
 * We pass things straight through to the Field API to handle validation
 * of the attached fields.
 */
function concours_example_concour_form_validate($form, &$form_state) {
  field_attach_form_validate('concours_example_concour', $form_state['values']['concour_entity'], $form, $form_state);
}


/**
 * Form submit handler: Submits concour_add_form information.
 */
function concours_example_concour_form_submit($form, &$form_state) {
  $entity = $form_state['values']['concour_entity'];
  $entity->item_description = $form_state['values']['item_description'];
  field_attach_submit('concours_example_concour', $entity, $form, $form_state);
  $entity = concours_example_concour_save($entity);
  $form_state['redirect'] = 'examples/concours_example/concour/' . $entity->concour_id;
}

/**
 * Form deletion handler.
 *
 * @todo: 'Are you sure?' message.
 */
function concours_example_concour_edit_delete($form, &$form_state) {
  $entity = $form_state['values']['concour_entity'];
  concours_example_concour_delete($entity);
  drupal_set_message(t('The entity %item_description (ID %id) has been deleted',
    array('%item_description' => $entity->item_description, '%id' => $entity->concour_id))
  );
  $form_state['redirect'] = 'examples/concours_example';
}

/**
 * We save the entity by calling the controller.
 */
function concours_example_concour_save(&$entity) {
  return entity_get_controller('concours_example_concour')->save($entity);
}

/**
 * Use the controller to delete the entity.
 */
function concours_example_concour_delete($entity) {
  entity_get_controller('concours_example_concour')->delete($entity);
}

/**
 * ConcoursExampleConcourControllerInterface definition.
 *
 * We create an interface here because anyone could come along and
 * use hook_entity_info_alter() to change our controller class.
 * We want to let them know what methods our class needs in order
 * to function with the rest of the module, so here's a handy list.
 *
 * @see hook_entity_info_alter()
 */
interface ConcoursExampleConcourControllerInterface
  extends DrupalEntityControllerInterface {

  /**
   * Create an entity.
   */
  public function create();

  /**
   * Save an entity.
   *
   * @param object $entity
   *   The entity to save.
   */
  public function save($entity);

  /**
   * Delete an entity.
   *
   * @param object $entity
   *   The entity to delete.
   */
  public function delete($entity);

}

/**
 * ConcoursExampleConcourController extends DrupalDefaultEntityController.
 *
 * Our subclass of DrupalDefaultEntityController lets us add a few
 * important create, update, and delete methods.
 */
class ConcoursExampleConcourController
  extends DrupalDefaultEntityController
  implements ConcoursExampleConcourControllerInterface {

  /**
   * Create and return a new concours_example_concour entity.
   */
  public function create() {
    $entity = new stdClass();
    $entity->type = 'concours_example_concour';
    $entity->concour_id = 0;
    $entity->bundle_type = 'first_example_bundle';
    $entity->item_description = '';
    return $entity;
  }

  /**
   * Saves the custom fields using drupal_write_record().
   */
  public function save($entity) {
    // If our entity has no concour_id, then we need to give it a
    // time of creation.
    if (empty($entity->concour_id)) {
      $entity->created = time();
    }
    // Invoke hook_entity_presave().
    module_invoke_all('entity_presave', $entity, 'concours_example_concour');
    // The 'primary_keys' argument determines whether this will be an insert
    // or an update. So if the entity already has an ID, we'll specify
    // concour_id as the key.
    $primary_keys = $entity->concour_id ? 'concour_id' : array();
    // Write out the entity record.
    drupal_write_record('concours_example_concour', $entity, $primary_keys);
    // We're going to invoke either hook_entity_update() or
    // hook_entity_insert(), depending on whether or not this is a
    // new entity. We'll just store the name of hook_entity_insert()
    // and change it if we need to.
    $invocation = 'entity_insert';
    // Now we need to either insert or update the fields which are
    // attached to this entity. We use the same primary_keys logic
    // to determine whether to update or insert, and which hook we
    // need to invoke.
    if (empty($primary_keys)) {
      field_attach_insert('concours_example_concour', $entity);
    }
    else {
      field_attach_update('concours_example_concour', $entity);
      $invocation = 'entity_update';
    }
    // Invoke either hook_entity_update() or hook_entity_insert().
    module_invoke_all($invocation, $entity, 'concours_example_concour');
    return $entity;
  }

  /**
   * Delete a single entity.
   *
   * Really a convenience function for deleteMultiple().
   */
  public function delete($entity) {
    $this->deleteMultiple(array($entity));
  }

  /**
   * Delete one or more concours_example_concour entities.
   *
   * Deletion is unfortunately not supported in the base
   * DrupalDefaultEntityController class.
   *
   * @param array $entities
   *   An array of entity IDs or a single numeric ID.
   */
  public function deleteMultiple($entities) {
    $concour_ids = array();
    if (!empty($entities)) {
      $transaction = db_transaction();
      try {
        foreach ($entities as $entity) {
          // Invoke hook_entity_delete().
          module_invoke_all('entity_delete', $entity, 'concours_example_concour');
          field_attach_delete('concours_example_concour', $entity);
          $concour_ids[] = $entity->concour_id;
        }
        db_delete('concours_example_concour')
          ->condition('concour_id', $concour_ids, 'IN')
          ->execute();
      }
      catch (Exception $e) {
        $transaction->rollback();
        watchdog_exception('concours_example', $e);
        throw $e;
      }
    }
  }
}

/**
 * @} End of "defgroup concours_example".
 */